#!/bin/bash

xcodePath="/Applications/Xcode.app"
binaryPath="$xcodePath/Contents/MacOS/Xcode"
pluginsDir="$HOME/Library/Application Support/Developer/Shared/Xcode/Plug-ins"
altPluginsDir="$HOME/Library/Developer/Xcode/Plug-ins"
tmpRepoPath="/tmp/unsign-updatePlugins"

bold=$(tput bold)
normal=$(tput sgr0)

function print {
	echo "${bold}$1${normal}"
}

if pgrep "Xcode" > /dev/null
then
    print "${bold}Xcode is Running, please quit first${normal}"
    exit 1
fi

while true
do

	declare -a mainOptTests=("unsign" "restoreUnsigned" "restoreSigned" "update" "quit")
	declare -a mainOpts=("Unsign Xcode" "Restore unsigned Xcode" "Restore signed Xcode" "Update plugins" "Quit")

	if [ -f "$binaryPath.unsigned" ]; then
		unset mainOptTests[2]
		unset mainOpts[2]
	elif [ -f "$binaryPath.signed" ]; then
		unset mainOpts[0]
		unset mainOptTests[0]
		unset mainOpts[1]
		unset mainOptTests[1]
	else
		unset mainOpts[1]
		unset mainOptTests[1]
		unset mainOpts[2]
		unset mainOptTests[2]
	fi

	mainOptTests=( "${mainOptTests[@]}" )
	mainOpts=( "${mainOpts[@]}" )

	echo "${bold}"
	PS3="Which do you want to do?: ${normal}"
	select opt in "${mainOpts[@]}" ; do 
		echo "${normal}"
		testRes=${mainOptTests[REPLY-1]}
		case $testRes in
			"unsign" )
				print "This will unsign Xcode. This can be reversed using this script. To continue, type 'unsign'. To cancel, hit return."
				read typed
				if [ "$typed" == "unsign" ] ; then
					rm -rf "$tmpRepoPath"
					mkdir "$tmpRepoPath"
					cd $tmpRepoPath
					echo "Cloning unsign repository"
					git clone git@github.com:steakknife/unsign.git
					cd unsign
					make
					
					print "Unsigning (admin permissions required)"
					sudo ./unsign "$binaryPath"
					status=$?
					if [ $status -eq 0 ]; then
						sudo mv "$binaryPath" "$binaryPath.signed"
						sudo mv "$binaryPath.unsigned" "$binaryPath"
						print "Done!"
					else
						print "Failed."
					fi
					rm -rf "$tmpRepoPath"
				else
					print "Didn't type unsign."
				fi
				break
				;;
			"restoreUnsigned" )
				sudo mv "$binaryPath" "$binaryPath.signed"
				sudo mv "$binaryPath.unsigned" "$binaryPath"
				print "Restored unsigned binary"
				break
				;;
			"restoreSigned" )
				sudo mv "$binaryPath" "$binaryPath.unsigned"
				sudo mv "$binaryPath.signed" "$binaryPath"
				print "Restored signed binary"
				break
				;;
			"update" )
				UUID=$(defaults read /Applications/Xcode.app/Contents/Info DVTPlugInCompatibilityUUID)

				function findPlugins {
					plugins=()
					while read -d '' -r; do
					    plugins+=( "$REPLY" )
					done < <(find "$1" -name "*.xcplugin" -maxdepth 1 -print0 2>/dev/null)
				}

				findPlugins "$pluginsDir"
				options=("${plugins[@]}")
				findPlugins "$altPluginsDir"
				options=( "${options[@]}" "${plugins[@]}" )


				echo "${bold}"
				PS3="Please select a plugin to update: ${normal}"
				select opt in "${options[@]}" "Back" "Quit" ; do 
					if (( REPLY == 1 + ${#options[@]} )) ; then
						break

					elif (( REPLY == 2 + ${#options[@]} )) ; then
						exit

				    elif (( REPLY > 0 && REPLY <= ${#options[@]} )) ; then
				    	defaults write "$opt/Contents/Info"  DVTPlugInCompatibilityUUIDs -array-add $UUID
				        print "Upgraded $opt"

				    else
				        print "Invalid option. Try another one."
				    fi
				done
				break
				;;
			"quit" )
				exit
				;;
		esac
	done
done


