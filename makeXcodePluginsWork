#!/bin/bash

xcodePath="/Applications/Xcode.app"
binaryPath="$xcodePath/Contents/MacOS/Xcode"
pluginsDir="$HOME/Library/Application Support/Developer/Shared/Xcode/Plug-ins"
altPluginsDir="$HOME/Library/Developer/Xcode/Plug-ins"
tmpRepoPath="/tmp/unsign-updatePlugins"

bold=$(tput bold)
normal=$(tput sgr0)

if pgrep "Xcode" > /dev/null
then
    printf "${bold}Xcode is Running, please quit first${normal}"
    exit 1
fi

while true
do

	declare -a mainOptTests=("unsign" "restoreUnsigned" "restoreSigned" "update" "updateAll" "quit")
	declare -a mainOpts=("Unsign Xcode" "Restore unsigned Xcode" "Restore signed Xcode" "Update specific plugins" "Update all plugins" "Quit")

	if [ -f "$binaryPath.unsigned" ]; then
		unset mainOptTests[2]
		unset mainOpts[2]
	elif [ -f "$binaryPath.signed" ]; then
		unset mainOpts[0]
		unset mainOptTests[0]
		unset mainOpts[1]
		unset mainOptTests[1]
	else
		unset mainOpts[1]
		unset mainOptTests[1]
		unset mainOpts[2]
		unset mainOptTests[2]
	fi

	mainOptTests=( "${mainOptTests[@]}" )
	mainOpts=( "${mainOpts[@]}" )

	printf "\n${bold}"
	PS3="${bold}Which do you want to do?: ${normal}"
	select opt in "${mainOpts[@]}" ; do 
		printf "${normal}"
		testRes=${mainOptTests[REPLY-1]}
		case $testRes in
			"unsign" )
				printf "This will unsign Xcode. This can be reversed using this script. To continue, type 'unsign'. To cancel, hit return."
				read typed
				if [ "$typed" == "unsign" ] ; then
					rm -rf "$tmpRepoPath"
					mkdir "$tmpRepoPath"
					cd $tmpRepoPath
					printf "Cloning unsign repository"
					git clone git@github.com:steakknife/unsign.git
					cd unsign
					make
					
					printf "Unsigning (admin permissions required)"
					sudo ./unsign "$binaryPath"
					status=$?
					if [ $status -eq 0 ]; then
						sudo mv "$binaryPath" "$binaryPath.signed"
						sudo mv "$binaryPath.unsigned" "$binaryPath"
						printf "Done!"
					else
						printf "Failed."
					fi
					rm -rf "$tmpRepoPath"
				else
					printf "Didn't type unsign."
				fi
				break
				;;
			"restoreUnsigned" )
				sudo mv "$binaryPath" "$binaryPath.signed"
				sudo mv "$binaryPath.unsigned" "$binaryPath"
				printf "Restored unsigned binary"
				break
				;;
			"restoreSigned" )
				sudo mv "$binaryPath" "$binaryPath.unsigned"
				sudo mv "$binaryPath.signed" "$binaryPath"
				printf "Restored signed binary"
				break
				;;
			"update" | "updateAll" )
				UUID=$(defaults read /Applications/Xcode.app/Contents/Info DVTPlugInCompatibilityUUID)

				function containsElement {
					local e
					for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
					return 1
				}

				function checkIfLatestUUID {
					existingUUIDs=($(defaults read "$1/Contents/Info" DVTPlugInCompatibilityUUIDs | sed "s/[,()\"]*//g"))
					containsElement "$UUID" "${existingUUIDs[@]}"
					return $?
				}

				found=0

				function findPlugins {
					plugins=()
					while read -d '' -r; do
						((found++))
						checkIfLatestUUID "$REPLY"
						if [ $? -eq 1 ]; then
						    plugins+=( "$REPLY" )
					   	fi
					done < <(find "$1" -name "*.xcplugin" -maxdepth 1 -print0 2>/dev/null)
				}

				function upgradePlugin {
					checkIfLatestUUID "$1"
					if [ $? -eq 0 ]; then
						return 1
					fi
					defaults write "$1/Contents/Info"  DVTPlugInCompatibilityUUIDs -array-add $UUID
			        return 0
				}

				findPlugins "$pluginsDir"
				options=("${plugins[@]}")
				findPlugins "$altPluginsDir"
				options=( "${options[@]}" "${plugins[@]}" )

				printf "\n"

				if [ ${#options[@]} -eq 0 ]; then
					printf "No plugins need upgrading! $found plugins found already have latest UUID.\n"
					break
				else
					((upgraded=$found-${#options[@]}))
					if [ $upgraded -gt 0 ]; then
						printf "$upgraded plugins already have latest UUID.\n"
					fi
				fi

				

				if [ $testRes == "update" ]; then
					printf "\n${bold}"
					PS3="${bold}Please select a plugin to update: ${normal}"
					select opt in "${options[@]}" "Back" "Quit" ; do 
						if (( REPLY == 1 + ${#options[@]} )) ; then
							break

						elif (( REPLY == 2 + ${#options[@]} )) ; then
							exit

					    elif (( REPLY > 0 && REPLY <= ${#options[@]} )) ; then
					    	upgradePlugin "$opt"
					    	if [ $? -eq 0 ]; then
						    	printf "Upgraded $opt"
						    else
						    	printf "Already upgraded this plugin"
						    fi
					    else
					        printf "Invalid option. Try another one."
					    fi
					    printf "\n"
					done
				else
					for i in "${options[@]}"; do
			            upgradePlugin "$i"
			            if [ $? -eq 0 ]; then
			            	printf "Upgraded $i"
			            fi
			        done
				fi
				break
				;;
			"quit" )
				exit
				;;
		esac
	done
done


